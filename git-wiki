#!/usr/bin/env node

var sys = require('sys');
var spawn = require('child_process').spawn;
var fs = require('fs');
var exec = require('child_process').exec;
var markdown = require('markdown').markdown;

//console.log(process.argv);

var cloneurl = process.argv[2];
var localdir = process.argv[3];

if (cloneurl == undefined || localdir == undefined) {
    console.log('#####');
    console.log('Usage:');
    console.log('git-wiki cloneurl localdir');
    console.log('');
    console.log('where cloneurl is the git repo you wish to clone');
    console.log('and localdir is the output path, the root of your site');
    console.log('');
    console.log('both are required');
    console.log('the localdir will be an up to date clone of the git repo with all .md files converted to .html');
    console.log('');
    console.log('the template files HEADER and FOOTER will be prepended and appended respectively to each .md file when converted to .html');
    console.log('#####');
    process.exit(code = 0);
}

// make the local directory
if (!fs.existsSync(localdir)) {
    fs.mkdirSync(localdir);
}

// check if .git exists in localdir
if (fs.existsSync(localdir + '/.git')) {
    // git already there, just pull
    var git = spawn('git', ['pull'], {
        'cwd': localdir
    });
} else {
    if (fs.existsSync(localdir)) {
        deleteFolderRecursive(localdir);
    }
    var git = spawn('git', ['clone', cloneurl, localdir]);
}

git.stdout.on('data', function (data) {
    //console.log('stdout: ' + data);
});

git.stderr.on('data', function (data) {
    console.log('git error: ' + data);
});

var wikiHeader = '';
var wikiFooter = '';

git.on('close', function (code) {
    if (code == 0) {
        console.log('finished git');

        // check for HEADER and FOOTER

        if (fs.existsSync(localdir+'/HEADER')) {
            wikiHeader = fs.readFileSync(localdir+'/HEADER', 'utf8');
        }

        if (fs.existsSync(localdir+'/FOOTER')) {
            wikiFooter = fs.readFileSync(localdir+'/FOOTER', 'utf8');
        }

        processGit(localdir);
    } else {
        console.log('git error');
    }
});

function deleteFolderRecursive(path) {
    var files = [];
    if (fs.existsSync(path)) {
        files = fs.readdirSync(path);
        files.forEach(function (file, index) {
            var curPath = path + "/" + file;
            if (fs.statSync(curPath).isDirectory()) { // recurse
                deleteFolderRecursive(curPath);
            } else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(path);
    }
};

function processGit(localdir) {

var child = exec('git rev-list --objects -g --no-walk --all', {'cwd':localdir},
  function (error, stdout, stderr) {
    //console.log('stdout: ' + stdout);
    //console.log('stderr: ' + stderr);
    if (error !== null) {
      console.log('exec error: ' + error);
    } else {
        var lines = stdout.split(/\r\n|\r|\n/g);
        for (var i=0; i<lines.length-1; i++) {
            processGitObject(lines[i], function (err) {

            });
        }
    }
});

var processGitObject = function(nline, cb) {
    var line = nline.split(' ');
    gitShow(line[0], function (data) {
        console.log('######## OBJECT '+line[0]+' ### TYPE '+data+' ### NAME '+line[1]);

        if (line.length>1) {
            var ext = line[1].split('.');
            if (ext[1] == 'md') {
                // this is a markdown file

		var fd = fs.readFileSync(localdir+'/'+line[1], 'utf8');

		// handle wikilinks

		// markdown
                console.log('processing md');
		fd = markdown.toHTML(fd);

		// internal links
		var exp = /\[\[(([^\]|]|\](?=[^\]]))*)(\|(([^\]]|\](?=[^\]]))*))?\]\]/ig
		fd = fd.replace(exp, function (match, p1, p2, p3, p4, offset, string) {
			if (p4) {
				return '<a href="'+p1+'.html">'+p4+'</a>';
			} else {
				return '<a href="'+p1+'.html">'+p1+'</a>';
			}
		});

		// urlize
		var exp = /(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/ig;
		fd = fd.replace(exp,"<a href='$1'>$1</a>");

		// create commit log for this file
		gitLogFile(line[1], function (d) {
			var cl = '<h2>Commit Log - '+ext[0]+'</h2><pre class="commitlog">'+d+'</pre>';
                	fs.writeFile(localdir+'/'+ext[0]+'.commitlog.html', wikiHeader+cl+wikiFooter, function (err) { console.log(err); });
		});

		// add commit log link
		fd += '<p><a class="commitlink" href="'+ext[0]+'.commitlog.html">Commit Log - '+ext[0]+'</a></p>';

		// write html
                fs.writeFile(localdir+'/'+ext[0]+'.html', wikiHeader+fd+wikiFooter, function (err) { console.log(err); });

            }
        }
    });
}

var gitLogFile = function(file, cb) {

var child = exec('git log -p '+file, {'cwd':localdir},
  function (error, stdout, stderr) {
    //console.log('stdout: ' + stdout);
    //console.log('stderr: ' + stderr);
    if (error !== null) {
      console.log('exec error: ' + error);
    } else {
        cb(stdout.trim());
    }
});
    
}

var gitShow = function(hash, cb) {

var child = exec('git cat-file -t '+hash, {'cwd':localdir},
  function (error, stdout, stderr) {
    //console.log('stdout: ' + stdout);
    //console.log('stderr: ' + stderr);
    if (error !== null) {
      console.log('exec error: ' + error);
    } else {
        cb(stdout.trim());
    }
});
    
}

String.prototype.trim = function() {
    return this.replace(/^\s+|\s+$/g, "");
};}
