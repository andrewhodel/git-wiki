#!/usr/bin/env node

var http = require('http');
var https = require('https');
var async = require('async');
var url = require('url');
var sys = require('sys');
var spawn = require('child_process').spawn;
var fs = require('fs');
var exec = require('child_process').exec;
var marked = require('marked');
var feedread = require('feed-read');

//console.log(process.argv);

var cloneurl = process.argv[2];
var localdir = process.argv[3];

if (cloneurl == undefined || localdir == undefined) {
    console.log('#####');
    console.log('Usage:');
    console.log('git-wiki cloneurl localdir');
    console.log('');
    console.log('where cloneurl is the git repo you wish to clone');
    console.log('and localdir is the output path, the root of your site');
    console.log('');
    console.log('both are required');
    console.log('the localdir will be an up to date clone of the git repo with all .md files converted to .html');
    console.log('');
    console.log('the template files HEADER and FOOTER will be prepended and appended respectively to each .md file when converted to .html');
    console.log('#####');
    process.exit(code = 0);
}

// make the local directory
if (!fs.existsSync(localdir)) {
    fs.mkdirSync(localdir);
}

// check if .git exists in localdir
if (fs.existsSync(localdir + '/.git')) {
    // git already there, just pull
    var git = spawn('git', ['pull'], {
        'cwd': localdir
    });
} else {
    if (fs.existsSync(localdir)) {
        deleteFolderRecursive(localdir);
    }
    var git = spawn('git', ['clone', cloneurl, localdir]);
}

git.stdout.on('data', function (data) {
    //console.log('stdout: ' + data);
});

git.stderr.on('data', function (data) {
    console.log('git: ' + data);
});

var wikiHeader = '';
var wikiFooter = '';

git.on('close', function (code) {
    if (code == 0) {
        console.log('finished git');

        // check for HEADER and FOOTER

        if (fs.existsSync(localdir + '/HEADER')) {
            wikiHeader = fs.readFileSync(localdir + '/HEADER', 'utf8');
        }

        if (fs.existsSync(localdir + '/FOOTER')) {
            wikiFooter = fs.readFileSync(localdir + '/FOOTER', 'utf8');
        }

        processGit(localdir);
    } else {
        console.log('git error');
    }
});

function deleteFolderRecursive(path) {
    var files = [];
    if (fs.existsSync(path)) {
        files = fs.readdirSync(path);
        files.forEach(function (file, index) {
            var curPath = path + "/" + file;
            if (fs.statSync(curPath).isDirectory()) { // recurse
                deleteFolderRecursive(curPath);
            } else { // delete file
                fs.unlinkSync(curPath);
            }
        });
        fs.rmdirSync(path);
    }
};

function feedItem(title, author, authorThumb, authorLink, data, link, created) {

    if (title == '' || data == '') {
	return null;
    } else {


    created = Math.round(new Date(created).getTime()/1000);

    var h = '<div class="feedItem">';
    h += '<div class="feedAuthor"><a href="' + authorLink + '">' + author;

	if (authorThumb) {
		h += '<br /><img src="'+authorThumb+'" />';
	}

    h += '</a></div>';
    h += '<div class="feedRBox">';
    h += '<div class="feedTitle"><a href="' + link + '">' + title + '</a></div><div class="feedCreated">'+created+'</div>';
    h += '<div class="feedData">' + data + '</div>';
    h += '</div>';
    h += '</div>';
    return {'created':created,'data':h};

    }

}

function iterateFeeds(feed, cb) {

    console.log('iterating feed ' + feed.feed + ' with ' + feed.type);

    if (feed.type == 'plus') {

        var urlp = url.parse('https://www.googleapis.com/plus/v1/people/' + feed.feed + '/activities/public?maxResults=3&key=AIzaSyAo9gEviBueR0MQzBP70TrJMFfabh6hbu8');

        var req = https.request({
            hostname: urlp.hostname,
            path: urlp.path,
            method: urlp.method,
            port: urlp.port,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.8.1.13) Gecko/20080311 Firefox/2.0.0.13'
            }
        }, function (resp) {
            if (resp.statusCode == 200) {

                var thisd = '';

                resp.on('data', function (data) {
                    //console.log(data.length);
                    thisd += data;
                });

                resp.on('error', function (err) {
                    cb(err);
                });

                resp.on('end', function () {
                    var plusR = JSON.parse(thisd);
                    var r = [];
                    for (var c = 0; c < plusR.items.length; c++) {
                        var ti = plusR.items[c];

			if (Array.isArray(ti.object.attachments)) {

				for (var m=0; m<ti.object.attachments.length; m++) {
					if (typeof ti.object.attachments[m].image !== 'undefined') {
						ti.object.content += '<br /><a href="'+ti.object.attachments[m].url+'"><img src="'+ti.object.attachments[m].image.url+'" /></a>';
					}
				}

			}

                        r.push(feedItem(ti.title, ti.actor.displayName, ti.actor.image.url, ti.actor.url, ti.object.content, ti.url, ti.published));
                    }
                    cb(null, r);
                });

            } else {
                cb('plus feed ' + feed.feed + ' failed http request');
            }
        });

        req.on('error', function (err) {
            cb(err);
        });

        req.end();

    } else if (feed.type == 'rss') {

feedread(feed.feed, function(err, articles) {
  if (err) throw err;
  // Each article has the following properties:
  // 
  //   * "title"     - The article title (String).
  //   * "author"    - The author's name (String).
  //   * "link"      - The original article link (String).
  //   * "content"   - The HTML content of the article (String).
  //   * "published" - The date that the article was published (Date).
  //   * "feed"      - {name, source, link}
  // 
	r = [];
	for (var i=0; i<articles.length; i++) {
		if (i<3) {
			r.push(feedItem(articles[i].title, articles[i].author, null, articles[i].link, articles[i].content, articles[i].link, articles[i].published));
		}
	}
	cb(null, r);
});

    } else {
        cb(null, 'unsupported feed type ' + feed.type);
    }

}

function processGit(localdir) {

    var child = exec('git ls-tree --full-tree -r HEAD', {
            'cwd': localdir
        },
        function (error, stdout, stderr) {
            //console.log('stdout: ' + stdout);
            //console.log('stderr: ' + stderr);
            if (error !== null) {
                console.log('git ls-tree error: ' + error);
            } else {
                var lines = stdout.split(/\r\n|\r|\n/g);
                for (var i = 0; i < lines.length - 1; i++) {
                    processGitObject(lines[i], function (err) {

                    });
                }
            }
        });

    var processGitObject = function (nline, cb) {
        var line = nline.split(/\s+/g);
        gitShow(line[2], function (data) {
            console.log('######## OBJECT ' + line[2] + ' ### TYPE ' + data + ' ### NAME ' + line[3]);

            if (line.length > 1) {
                var ext = line[3].split('.');

                if (ext[1] == 'md') {
                    // this is a markdown file

                    var fd = fs.readFileSync(localdir + '/' + line[3], 'utf8');

                    // markdown
                    console.log('processing md');

                            var mo = {
                                gfm: true,
                                highlight: false,
                                tables: true,
                                breaks: false,
                                pedantic: false,
                                sanitize: true,
                                smartLists: true,
                                smartypants: false,
                                langPrefix: 'lang-'
                            };

			marked(fd, mo, function (err, content) {

                    		saveFile(localdir, ext[0], content);
			});

                } else if (ext[1] == 'feed') {

                    // this is a feed list json file

			var feeds = require(localdir + '/' + line[3]);

			console.log(feeds);

                        async.map(feeds, iterateFeeds, function (err, results) {

                            console.log('feed map done');
			    var a = [];
                            for (var i=0; i<results.length; i++) {
                                if (Array.isArray(results[i])) {
                                    // each item in results[i] is a formatted html feed block
				    for (var c=0; c<results[i].length; c++) {
					if (results[i][c] !== null) {
						a.push(results[i][c]);
					} else {
						console.log(results[i][c]);
					}
				    }
                                } else {
                                    // nope
                                }
                            }

a.sortOn('created');
a.reverse();

var ah = '<div class="feedList">';

for (var i=0; i<a.length; i++) {
	ah += a[i].data;
}

			    saveFile(localdir, ext[0], ah+'</div>');
                        });

                }

                // create commit log for this file
                gitLogFile(line[3], function (d) {
                    var cl = '<h2>Commit Log - ' + ext[0] + '</h2><pre class="commitlog">' + d + '</pre>';
                    fs.writeFile(localdir + '/' + ext[0] + '.commitlog.html', wikiHeader + cl + wikiFooter, function (err) {
                        if (err) {
                            console.log(err);
                        }
                    });
                });

            }

        });
    }

    var gitLogFile = function (file, cb) {

        var child = exec('git log -p ' + file, {
                'cwd': localdir
            },
            function (error, stdout, stderr) {
                //console.log('stdout: ' + stdout);
                //console.log('stderr: ' + stderr);
                if (error !== null) {
                    console.log('git log error: ' + error);
                } else {
                    cb(stdout.trim());
                }
            });

    }

    var gitShow = function (hash, cb) {

        var child = exec('git cat-file -t ' + hash, {
                'cwd': localdir
            },
            function (error, stdout, stderr) {
                //console.log('stdout: ' + stdout);
                //console.log('stderr: ' + stderr);
                if (error !== null) {
                    console.log('git cat-file error: ' + error);
                } else {
                    cb(stdout.trim());
                }
            });

    }

}

function saveFile(localdir, path, data) {

    // add commit log link
    data += '<p><a class="commitlink" href="/' + path + '.commitlog.html">Commit Log - ' + path + '</a></p>';

    // write html
    fs.writeFile(localdir+'/'+path + '.html', wikiHeader + data + wikiFooter, function (err) {
        if (err) {
            console.log(err);
        }
    });

}

Array.prototype.sortOn = function(key){
    this.sort(function(a, b){
        if(a[key] < b[key]){
            return -1;
        }else if(a[key] > b[key]){
            return 1;
        }
        return 0;
    });
}

String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, "");
};
